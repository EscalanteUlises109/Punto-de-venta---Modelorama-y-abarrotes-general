@page "/login"
@inject IUsuarioService UsuarioService
@inject AuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Iniciar SesiÃ³n - IntegraTech POS</PageTitle>

<div class="container">
    <div class="row justify-content-center mt-5">
        <div class="col-md-4">
            <div class="card-surface elev-1">
                <div class="p-4 bg-brand-gradient text-white" style="border-top-left-radius: var(--radius-lg); border-top-right-radius: var(--radius-lg);">
                    <div class="text-center">
                        <h3 class="mb-1">ðŸ›’ IntegraTech POS</h3>
                        <p class="mb-0">Sistema de Punto de Venta</p>
                    </div>
                </div>
                <div class="p-4">
                    <div class="text-center mb-3">
                        <h5>Iniciar SesiÃ³n</h5>
                    </div>

                    @if (!string.IsNullOrEmpty(mensajeError))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            @mensajeError
                            <button type="button" class="btn-close" @onclick="() => mensajeError = null"></button>
                        </div>
                    }

                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Usuario</label>
                            <InputText class="input-base" @bind-Value="loginModel.NombreUsuario" placeholder="Ingrese su usuario" />
                            <ValidationMessage For="@(() => loginModel.NombreUsuario)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">ContraseÃ±a</label>
                            <InputText type="password" class="input-base" @bind-Value="loginModel.Password" placeholder="Ingrese su contraseÃ±a" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        <button type="submit" class="btn btn-primary-brand w-100" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            <i class="bi bi-box-arrow-in-right me-2"></i>
                            Iniciar SesiÃ³n
                        </button>
                    </EditForm>

                    <div class="mt-3 text-center">
                        <small class="text-muted">
                            Consejo: si es tu primera vez, puedes usar las credenciales por defecto.
                        </small>
                    </div>

                    
                    <div class="mt-3">
                        <button type="button" class="btn btn-outline-warning btn-sm w-100 mb-2" @onclick="ResetearAdmin" disabled="@isResetting">
                            @if (isResetting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            <i class="bi bi-arrow-clockwise me-2"></i>
                            Resetear ContraseÃ±a Admin
                        </button>

                        <button type="button" class="btn btn-outline-danger btn-sm w-100" @onclick="EliminarBaseDeDatos" disabled="@isResetting">
                            @if (isResetting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            <i class="bi bi-trash me-2"></i>
                            Eliminar y Recrear Base de Datos
                        </button>

                        @if (!string.IsNullOrEmpty(mensajeReset))
                        {
                            <div class="alert alert-info mt-2 mb-0 py-2 elev-1" role="alert">
                                <small>@mensajeReset</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject]
    private DatabaseService DatabaseService { get; set; } = default!;

    private LoginModel loginModel = new();
    private string? mensajeError;
    private string? mensajeReset;
    private bool isLoading = false;
    private bool isResetting = false;
    private bool dbInicializada = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("ðŸ”„ Login.razor - Inicializando DatabaseService...");
            await DatabaseService.InitializeAsync();
            dbInicializada = true;
            Console.WriteLine("âœ… Login.razor - DatabaseService inicializado correctamente");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"âŒ Login.razor - Error inicializando BD: {ex.Message}");
            mensajeError = "Error al inicializar el sistema. Por favor recarga la aplicaciÃ³n.";
        }
    }

    private async Task ResetearAdmin()
    {
        isResetting = true;
        mensajeReset = null;
        mensajeError = null;

        try
        {
            
            if (!dbInicializada)
            {
                await DatabaseService.InitializeAsync();
                dbInicializada = true;
            }

            Console.WriteLine("ðŸ”§ Reseteando usuario admin...");
            await DatabaseService.DiagnosticarUsuarioAdminAsync();
            await DatabaseService.ResetearPasswordAdminAsync();
            await DatabaseService.DiagnosticarUsuarioAdminAsync();
            
            mensajeReset = "âœ… Usuario admin reseteado. Ahora prueba: admin / admin123";
            
            
            loginModel = new LoginModel { NombreUsuario = "admin", Password = "admin123" };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"âŒ Error al resetear: {ex.Message}");
            mensajeReset = $"âŒ Error: {ex.Message}";
        }
        finally
        {
            isResetting = false;
        }
    }

    private async Task EliminarBaseDeDatos()
    {
        
        if (App.Current?.MainPage == null)
            return;

        bool confirmar = await App.Current.MainPage.DisplayAlert(
            "âš ï¸ Confirmar EliminaciÃ³n",
            "Esto eliminarÃ¡ TODOS los datos de la base de datos (productos, ventas, usuarios, etc.).\n\nÂ¿EstÃ¡s seguro?",
            "SÃ­, Eliminar Todo",
            "Cancelar"
        );

        if (!confirmar)
            return;

        isResetting = true;
        mensajeReset = null;
        mensajeError = null;

        try
        {
            Console.WriteLine("ðŸ—‘ï¸ Eliminando base de datos completa...");
            await DatabaseService.EliminarYRecrearBaseDeDatosAsync();
            dbInicializada = true; 
            
            mensajeReset = "âœ… Base de datos recreada desde cero.\nâœ… Usuario: admin | ContraseÃ±a: admin123";
            
            
            loginModel = new LoginModel { NombreUsuario = "admin", Password = "admin123" };
            
            if (App.Current?.MainPage != null)
            {
                await App.Current.MainPage.DisplayAlert(
                    "âœ… Ã‰xito",
                    "Base de datos eliminada y recreada correctamente.\n\nAhora puedes iniciar sesiÃ³n con:\nUsuario: admin\nContraseÃ±a: admin123",
                    "OK"
                );
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"âŒ Error eliminando BD: {ex.Message}");
            mensajeReset = $"âŒ Error: {ex.Message}";
            
            if (App.Current?.MainPage != null)
            {
                await App.Current.MainPage.DisplayAlert(
                    "âŒ Error",
                    $"No se pudo eliminar la base de datos:\n{ex.Message}",
                    "OK"
                );
            }
        }
        finally
        {
            isResetting = false;
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        mensajeError = null;

        try
        {
            
            if (!dbInicializada)
            {
                Console.WriteLine("âš ï¸ BD no inicializada, inicializando ahora...");
                await DatabaseService.InitializeAsync();
                dbInicializada = true;
            }

            
            var username = loginModel.NombreUsuario?.Trim() ?? string.Empty;
            var password = loginModel.Password?.Trim() ?? string.Empty;

            Console.WriteLine("========================================");
            Console.WriteLine($"ðŸ”‘ Intento de login desde UI");
            Console.WriteLine($"   BD Inicializada: {dbInicializada}");
            Console.WriteLine($"   Usuario: '{username}' (longitud: {username.Length})");
            Console.WriteLine($"   Password length: {password.Length} caracteres");
            Console.WriteLine("========================================");

            var usuario = await UsuarioService.LoginAsync(username, password);

            if (usuario != null)
            {
                Console.WriteLine($"âœ… Login exitoso - Usuario: {usuario.NombreUsuario}, Rol: {usuario.Rol}");
                
                
                AuthService.SetUsuario(usuario);
                
                
                if (usuario.Rol == "Admin")
                {
                    Navigation.NavigateTo("/");
                }
                else if (usuario.Rol == "Gerente")
                {
                    Navigation.NavigateTo("/");
                }
                else if (usuario.Rol == "Cajero")
                {
                    Navigation.NavigateTo("/ventas");
                }
                else
                {
                    Navigation.NavigateTo("/");
                }
            }
            else
            {
                Console.WriteLine("âŒ Login fallido - Credenciales invÃ¡lidas");
                mensajeError = "Usuario o contraseÃ±a incorrectos. Verifica que sean: admin / admin123";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"âŒ ExcepciÃ³n en HandleLogin: {ex.Message}");
            Console.WriteLine($"   Stack: {ex.StackTrace}");
            mensajeError = $"Error al iniciar sesiÃ³n: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "El usuario es obligatorio")]
        public string NombreUsuario { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "La contraseÃ±a es obligatoria")]
        public string Password { get; set; } = string.Empty;
    }
}

