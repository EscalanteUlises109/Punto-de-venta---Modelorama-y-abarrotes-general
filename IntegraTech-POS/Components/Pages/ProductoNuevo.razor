@page "/producto/nuevo"
@using Microsoft.AspNetCore.Components.Web
@using IntegraTech_POS.Services
@inject IProductoService ProductoService
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject BarcodeScannerService BarcodeScanner
@implements IDisposable

<PageTitle>Nuevo Producto</PageTitle>

@if (!AuthService.IsAuthenticated)
{
    Navigation.NavigateTo("/login");
    return;
}
@if (!AuthService.EsAdministrador() && !AuthService.EsGerente())
{
    Navigation.NavigateTo("/acceso-denegado");
    return;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-8">
            <div class="card-surface">
                <div class="p-3 d-flex justify-content-between align-items-center bg-brand-gradient text-white" style="border-top-left-radius: var(--radius-lg); border-top-right-radius: var(--radius-lg);">
                    <h3 class="mb-0">Agregar Nuevo Producto</h3>
                    <div>
                        <button class="btn btn-secondary me-2" @onclick="Cancelar" disabled="@isSaving">
                            <i class="bi bi-arrow-left"></i> Cancelar
                        </button>
                        <button class="btn btn-primary-brand" @onclick="GuardarProducto" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            <i class="bi bi-save"></i> Guardar
                        </button>
                    </div>
                </div>
                <div class="p-3">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show elev-1">
                            <i class="bi bi-exclamation-triangle"></i> @errorMessage
                            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                        </div>
                    }
                    <EditForm Model="producto" OnValidSubmit="GuardarProducto">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Nombre del Producto *</label>
                                    <InputText class="input-base" @bind-Value="producto.Nombre_Producto" placeholder="Ingrese el nombre" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">CÃ³digo de Barras 
                                        @if (esperandoEscaneo)
                                        {
                                            <span class="badge bg-success ms-2">
                                                <i class="bi bi-upc-scan"></i> Esperando escaneo...
                                            </span>
                                        }
                                    </label>
                                    <InputText class="input-base" @bind-Value="producto.Codigo_Barras" placeholder="Escanea o escribe el cÃ³digo" />
                                    <small class="form-text text-muted">
                                        ðŸ’¡ Puedes escanear el cÃ³digo de barras directamente con tu lector
                                    </small>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Precio de Venta *</label>
                                    <InputNumber class="input-base" @bind-Value="producto.Precio_Venta" placeholder="0.00" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Precio de Compra</label>
                                    <InputNumber class="input-base" @bind-Value="producto.Precio_Compra" placeholder="0.00" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Cantidad</label>
                                    <InputNumber class="input-base" @bind-Value="producto.Cantidad" placeholder="0" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">CategorÃ­a</label>
                                    <InputText class="input-base" @bind-Value="producto.Categoria" placeholder="CategorÃ­a del producto" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Distribuidor</label>
                                    <InputText class="input-base" @bind-Value="producto.Distribuidor" placeholder="Nombre del distribuidor" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-12">
                                <SelectorImagen Label="Imagen del Producto" 
                                              RutaImagenActual="@producto.ImagenPath" 
                                              OnImagenCambiada="OnImagenCambiada" />
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card-surface">
                <div class="p-3 bg-brand-gradient text-white" style="border-top-left-radius: var(--radius-lg); border-top-right-radius: var(--radius-lg);">
                    <h5 class="mb-0">Vista Previa</h5>
                </div>
                <div class="p-3">
                    @if (!string.IsNullOrWhiteSpace(producto.Nombre_Producto))
                    {
                        <div class="text-center mb-3">
                            <ImagenProducto RutaImagen="@producto.ImagenPath" 
                                          CssClass="img-thumbnail" 
                                          Style="max-width: 150px; max-height: 150px;" />
                        </div>
                        <h6>@producto.Nombre_Producto</h6>
                        <p class="text-muted mb-1">
                            <strong>Precio: </strong>$@producto.Precio_Venta.ToString("N2")
                        </p>
                        @if (!string.IsNullOrWhiteSpace(producto.Categoria))
                        {
                            <p class="text-muted mb-1">
                                <strong>CategorÃ­a: </strong>@producto.Categoria
                            </p>
                        }
                        @if (producto.Cantidad > 0)
                        {
                            <p class="text-muted mb-1">
                                <strong>Stock: </strong>@producto.Cantidad unidades
                            </p>
                        }
                    }
                    else
                    {
                        <p class="text-muted">Complete los campos para ver la vista previa</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Producto producto = new Producto
    {
        Fecha_Registro = DateTime.Now,
        Stock_Minimo = 5,
        Unidad_Medida = "Unidad"
    };
    private bool isSaving = false;
    private string? errorMessage = null;
    private bool esperandoEscaneo = false;

    protected override void OnInitialized()
    {
        BarcodeScanner.OnBarcodeScanned += OnBarcodeScanned;
        esperandoEscaneo = true;
    }

    private void OnBarcodeScanned(string barcode)
    {
        
        producto.Codigo_Barras = barcode;
        esperandoEscaneo = false;
        
        InvokeAsync(() =>
        {
            StateHasChanged();
            Console.WriteLine($"âœ… CÃ³digo de barras autocompletado: {barcode}");
        });
        
        
        Task.Delay(2000).ContinueWith(_ =>
        {
            esperandoEscaneo = true;
            InvokeAsync(StateHasChanged);
        });
    }

    private async Task GuardarProducto()
    {
        if (string.IsNullOrWhiteSpace(producto.Nombre_Producto))
        {
            errorMessage = "El nombre del producto es requerido";
            return;
        }

        if (producto.Precio_Venta <= 0)
        {
            errorMessage = "El precio de venta debe ser mayor a 0";
            return;
        }

        isSaving = true;
        errorMessage = null;
        StateHasChanged(); 

        try
        {
            var success = await ProductoService.CreateProductoAsync(producto);
            
            if (success)
            {
                Navigation.NavigateTo("/productos");
            }
            else
            {
                errorMessage = "Error al guardar el producto. Verifique la conexiÃ³n a la API.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/productos");
    }

    private void OnImagenCambiada(string nuevaRutaImagen)
    {
        producto.ImagenPath = nuevaRutaImagen;
        StateHasChanged();
    }

    public void Dispose()
    {
        BarcodeScanner.OnBarcodeScanned -= OnBarcodeScanned;
    }
}

